import { _ModuleSupport, _Scene, _Util } from 'ag-charts-community';
import { type LinearGaugeLabelDatum, LinearGaugeLabelProperties, type LinearGaugeNodeDatum, LinearGaugeSeriesProperties, type LinearGaugeTargetDatum } from './linearGaugeSeriesProperties';
export type GaugeAnimationState = 'empty' | 'ready' | 'waiting' | 'clearing';
export type GaugeAnimationEvent = 'update' | 'updateData' | 'highlight' | 'highlightMarkers' | 'resize' | 'clear' | 'reset' | 'skip';
export type GaugeAnimationData = {
    duration?: number;
};
interface LinearGaugeNodeDataContext extends _ModuleSupport.SeriesNodeDataContext<LinearGaugeNodeDatum, LinearGaugeLabelDatum> {
    targetData: LinearGaugeTargetDatum[];
    scaleData: LinearGaugeNodeDatum[];
}
export declare class LinearGaugeSeries extends _ModuleSupport.Series<LinearGaugeNodeDatum, LinearGaugeSeriesProperties, LinearGaugeLabelDatum, LinearGaugeNodeDataContext> implements _ModuleSupport.LinearGaugeSeries {
    static readonly className = "LinearGaugeSeries";
    static readonly type: "linear-gauge";
    canHaveAxes: boolean;
    properties: LinearGaugeSeriesProperties;
    originX: number;
    originY: number;
    get horizontal(): boolean;
    get thickness(): number;
    computeInset(direction: _ModuleSupport.ChartAxisDirection, ticks: number[]): number;
    private readonly scaleGroup;
    private readonly itemGroup;
    private readonly itemTargetGroup;
    private readonly itemTargetLabelGroup;
    private readonly itemLabelGroup;
    private readonly highlightTargetGroup;
    private scaleSelection;
    private datumSelection;
    private targetSelection;
    private targetLabelSelection;
    private labelSelection;
    private highlightTargetSelection;
    private readonly animationState;
    contextNodeData?: LinearGaugeNodeDataContext;
    constructor(moduleCtx: _ModuleSupport.ModuleContext);
    get hasData(): boolean;
    private nodeFactory;
    private markerFactory;
    processData(): Promise<void>;
    private formatLabel;
    private createLinearGradient;
    private getTargets;
    private getTargetPoint;
    private getTargetLabel;
    labelDatum(label: LinearGaugeLabelProperties, value: number): LinearGaugeLabelDatum;
    createNodeData(): Promise<{
        itemId: string;
        nodeData: LinearGaugeNodeDatum[];
        targetData: LinearGaugeTargetDatum[];
        labelData: LinearGaugeLabelDatum[];
        scaleData: LinearGaugeNodeDatum[];
    } | undefined>;
    updateSelections(resize: boolean): Promise<void>;
    private highlightDatum;
    update({ seriesRect }: {
        seriesRect?: _Scene.BBox;
    }): Promise<void>;
    private updateDatumSelection;
    private updateDatumNodes;
    private updateScaleSelection;
    private updateScaleNodes;
    private updateTargetSelection;
    private updateTargetNodes;
    private updateTargetLabelSelection;
    private updateTargetLabelNodes;
    private updateLabelSelection;
    private updateLabelNodes;
    labelsHaveExplicitText(): boolean;
    formatLabelText(datum?: {
        label: number;
    }): void;
    protected resetAllAnimation(): void;
    resetAnimation(phase: _ModuleSupport.ChartAnimationPhase): void;
    private animateLabelText;
    animateEmptyUpdateReady(): void;
    animateWaitingUpdateReady(): void;
    protected animateReadyResize(): void;
    getLabelData(): _Util.PointLabelDatum[];
    getSeriesDomain(): number[];
    getLegendData(): _ModuleSupport.ChartLegendDatum<any>[] | _ModuleSupport.ChartLegendDatum<_ModuleSupport.ChartLegendType>[];
    private readonly nodeDatum;
    pickNode(point: _Scene.Point, intent: _ModuleSupport.SeriesNodePickIntent): _ModuleSupport.PickResult | undefined;
    getTooltipHtml(nodeDatum: _ModuleSupport.SeriesNodeDatum): _ModuleSupport.TooltipContent;
    pickFocus(opts: _ModuleSupport.PickFocusInputs): _ModuleSupport.PickFocusOutputs | undefined;
    getCaptionText(): string;
}
export {};
