import { _ModuleSupport, _Scene } from 'ag-charts-community';
import type { BaseFunnelProperties } from './baseFunnelSeriesProperties';
import { FunnelConnector } from './funnelConnector';
export type Bounds = {
    x: number;
    y: number;
    width: number;
    height: number;
};
export type FunnelNodeLabelDatum = Readonly<_Scene.Point> & {
    text: string;
    textAlign: CanvasTextAlign;
    textBaseline: CanvasTextBaseline;
    datum: any;
    itemId: string;
    series: _ModuleSupport.CartesianSeriesNodeDatum['series'];
};
export interface FunnelNodeDatum extends _ModuleSupport.CartesianSeriesNodeDatum, Readonly<_Scene.Point> {
    readonly index: number;
    readonly valueIndex: number;
    readonly itemId: string;
    readonly width: number;
    readonly height: number;
    readonly label: FunnelNodeLabelDatum | undefined;
    readonly fill: string;
    readonly stroke: string;
    readonly strokeWidth: number;
    readonly opacity: number;
    readonly clipBBox?: _Scene.BBox;
}
export interface FunnelConnectorDatum {
    readonly datum: FunnelNodeDatum;
    readonly x0: number;
    readonly y0: number;
    readonly x1: number;
    readonly y1: number;
    readonly x2: number;
    readonly y2: number;
    readonly x3: number;
    readonly y3: number;
    readonly fill: string;
    readonly stroke: string;
    readonly opacity: number;
}
export interface FunnelContext extends _ModuleSupport.CartesianSeriesNodeDataContext<FunnelNodeDatum, FunnelNodeLabelDatum> {
    connectorData: FunnelConnectorDatum[];
}
export interface FunnelAnimationData<TNode extends _ModuleSupport.QuadtreeCompatibleNode> extends _ModuleSupport.CartesianAnimationData<TNode, FunnelNodeDatum, FunnelNodeLabelDatum, FunnelContext> {
}
export declare class FunnelSeriesNodeEvent<TEvent extends string = _ModuleSupport.SeriesNodeEventTypes> extends _ModuleSupport.SeriesNodeEvent<FunnelNodeDatum, TEvent> {
    readonly xKey?: string;
    readonly yKey?: string;
    constructor(type: TEvent, nativeEvent: Event, datum: FunnelNodeDatum, series: BaseFunnelSeries<any>);
}
export interface FunnelSeriesShapeStyle {
    fill: string | undefined;
    fillOpacity: number;
    stroke: string | undefined;
    strokeWidth: number;
    strokeOpacity: number;
    lineDash: number[];
    lineDashOffset: number;
}
export declare abstract class BaseFunnelSeries<TNode extends _ModuleSupport.QuadtreeCompatibleNode> extends _ModuleSupport.AbstractBarSeries<TNode, BaseFunnelProperties<any>, FunnelNodeDatum, FunnelNodeLabelDatum, FunnelContext> {
    protected readonly NodeEvent: typeof FunnelSeriesNodeEvent;
    protected readonly connectorNodeGroup: _Scene.Group;
    protected connectorSelection: _Scene.Selection<FunnelConnector, FunnelConnectorDatum>;
    get pickModeAxis(): "main-category";
    constructor({ moduleCtx, animationResetFns, }: {
        moduleCtx: _ModuleSupport.ModuleContext;
        animationResetFns: {
            datum: (node: TNode, datum: FunnelNodeDatum) => _ModuleSupport.AnimationValue & Partial<TNode>;
        };
    });
    protected isVertical(): boolean;
    protected abstract connectorEnabled(): boolean;
    protected abstract barStyle(): FunnelSeriesShapeStyle;
    protected abstract connectorStyle(): FunnelSeriesShapeStyle;
    private connectionFactory;
    processData(dataController: _ModuleSupport.DataController): Promise<void>;
    getSeriesDomain(direction: _ModuleSupport.ChartAxisDirection): any[];
    createNodeData(): Promise<FunnelContext | undefined>;
    protected abstract createLabelData({ rect, yDatum, datum, }: {
        rect: Bounds;
        barAlongX: boolean;
        yDatum: number;
        datum: any;
    }): FunnelNodeLabelDatum | undefined;
    protected updateNodes(highlightedItems: FunnelNodeDatum[] | undefined, seriesHighlighted: boolean, anySeriesItemEnabled: boolean): Promise<void>;
    protected updateDatumSelection(opts: {
        nodeData: FunnelNodeDatum[];
        datumSelection: _Scene.Selection<TNode, FunnelNodeDatum>;
    }): Promise<_Scene.Selection<TNode, FunnelNodeDatum>>;
    private updateConnectorSelection;
    private updateConnectorNodes;
    protected getHighlightLabelData(labelData: FunnelNodeLabelDatum[], highlightedItem: FunnelNodeDatum): FunnelNodeLabelDatum[] | undefined;
    protected updateLabelSelection(opts: {
        labelData: FunnelNodeLabelDatum[];
        labelSelection: FunnelAnimationData<TNode>['labelSelection'];
    }): Promise<_Scene.Selection<_Scene.Text, FunnelNodeLabelDatum>>;
    protected updateLabelNodes(opts: {
        labelSelection: _Scene.Selection<_Scene.Text, any>;
    }): Promise<void>;
    getTooltipHtml(nodeDatum: FunnelNodeDatum): _ModuleSupport.TooltipContent;
    getLegendData(legendType: _ModuleSupport.ChartLegendType): _ModuleSupport.CategoryLegendDatum[];
    private resetConnectorAnimation;
    protected resetAllAnimation(data: _ModuleSupport.CartesianAnimationData<TNode, FunnelNodeDatum, FunnelNodeLabelDatum, FunnelContext>): void;
    animateEmptyUpdateReady({ labelSelection }: FunnelAnimationData<TNode>): void;
    animateWaitingUpdateReady(data: FunnelAnimationData<TNode>): void;
    private getDatumId;
    protected isLabelEnabled(): boolean;
    protected onDataChange(): void;
    protected computeFocusBounds({ datumIndex, seriesRect }: _ModuleSupport.PickFocusInputs): _Scene.BBox | undefined;
}
