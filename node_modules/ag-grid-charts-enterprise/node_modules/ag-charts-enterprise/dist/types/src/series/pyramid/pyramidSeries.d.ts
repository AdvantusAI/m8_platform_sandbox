import { _ModuleSupport, _Scene, _Util } from 'ag-charts-community';
import { FunnelConnector } from '../funnel/funnelConnector';
import { PyramidProperties } from './pyramidProperties';
export type PyramidNodeLabelDatum = Readonly<_Scene.Point> & {
    readonly text: string;
    readonly textAlign: CanvasTextAlign;
    readonly textBaseline: CanvasTextBaseline;
};
export interface PyramidNodeDatum extends _ModuleSupport.SeriesNodeDatum, Readonly<_Scene.Point> {
    readonly index: number;
    readonly xValue: string;
    readonly yValue: number;
    readonly top: number;
    readonly right: number;
    readonly bottom: number;
    readonly left: number;
    readonly fill: string;
    readonly stroke: string;
    readonly label: PyramidNodeLabelDatum | undefined;
}
export interface PyramidNodeDataContext extends _ModuleSupport.SeriesNodeDataContext<PyramidNodeDatum, PyramidNodeLabelDatum> {
    stageLabelData: PyramidNodeLabelDatum[] | undefined;
}
export declare class PyramidSeries extends _ModuleSupport.DataModelSeries<PyramidNodeDatum, PyramidProperties, PyramidNodeLabelDatum, PyramidNodeDataContext> {
    properties: PyramidProperties;
    private readonly itemGroup;
    private readonly itemLabelGroup;
    private readonly stageLabelGroup;
    datumSelection: _Scene.Selection<FunnelConnector, PyramidNodeDatum>;
    private labelSelection;
    private stageLabelSelection;
    private highlightDatumSelection;
    contextNodeData?: PyramidNodeDataContext;
    constructor(moduleCtx: _ModuleSupport.ModuleContext);
    private nodeFactory;
    getNodeData(): PyramidNodeDatum[] | undefined;
    processData(dataController: _ModuleSupport.DataController): Promise<void>;
    createNodeData(): Promise<PyramidNodeDataContext | undefined>;
    updateSelections(): Promise<void>;
    update({ seriesRect }: {
        seriesRect?: _Scene.BBox;
    }): Promise<void>;
    private updateDatumSelection;
    private updateDatumNodes;
    private updateLabelSelection;
    private updateLabelNodes;
    private updateStageLabelSelection;
    private updateStageLabelNodes;
    resetAnimation(_chartAnimationPhase: _ModuleSupport.ChartAnimationPhase): void;
    protected computeFocusBounds(opts: _ModuleSupport.PickFocusInputs): _Scene.BBox | _Scene.Path | undefined;
    getTooltipHtml(nodeDatum: any): _ModuleSupport.TooltipContent;
    getLabelData(): _Util.PointLabelDatum[];
    getSeriesDomain(_direction: _ModuleSupport.ChartAxisDirection): any[];
    pickNodeClosestDatum({ x, y }: _Scene.Point): _ModuleSupport.SeriesNodePickMatch | undefined;
    getLegendData(_legendType: unknown): _ModuleSupport.CategoryLegendDatum[] | _ModuleSupport.GradientLegendDatum[];
}
