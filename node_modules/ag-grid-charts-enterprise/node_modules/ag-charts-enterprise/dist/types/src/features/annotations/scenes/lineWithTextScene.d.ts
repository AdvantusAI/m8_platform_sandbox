import { _ModuleSupport, _Scene } from 'ag-charts-community';
import type { ChannelTextProperties, LineTextProperties } from '../annotationProperties';
import type { AnnotationScene } from './annotationScene';
import type { CollidableLine } from './collidableLineScene';
import { CollidableText } from './collidableTextScene';
interface Numbers {
    left: _ModuleSupport.Vec2;
    right: _ModuleSupport.Vec2;
    inset: _ModuleSupport.Vec2;
    offset: _ModuleSupport.Vec2;
    normal: _ModuleSupport.Vec2;
    angle: number;
}
export declare class LineWithTextScene {
    static updateLineText<Datum extends {
        strokeWidth?: number;
        text?: LineTextProperties;
    }>(this: AnnotationScene & {
        text?: CollidableText;
    }, line: CollidableLine, datum: Datum, coords: _ModuleSupport.Vec4): {
        clipMask: {
            x: number;
            y: number;
            radius: number;
        };
        numbers: Numbers;
    } | undefined;
    static updateChannelText<Datum extends {
        strokeWidth?: number;
        text?: ChannelTextProperties;
    }>(this: AnnotationScene & {
        text?: _Scene.TransformableText;
    }, offsetInsideTextLabel: boolean, datum: Datum, top: _ModuleSupport.Vec4, bottom: _ModuleSupport.Vec4): void;
    static getNumbers(coords: _ModuleSupport.Vec4, fontSize?: number, strokeWidth?: number): Numbers;
    static positionAndAlignment({ left, right, normal, angle, inset, offset }: Numbers, position?: 'top' | 'center' | 'bottom', alignment?: 'left' | 'center' | 'right', offsetInsideTextLabel?: boolean): {
        point: _ModuleSupport.Vec2;
        textBaseline: "bottom" | "middle" | "top";
    };
    static setProperties(scene: _Scene.TransformableText, datum: LineTextProperties | ChannelTextProperties, point: _ModuleSupport.Vec2, angle: number, textBaseline: CanvasTextBaseline): void;
}
export {};
